CREATE TABLE CB_CINEMA ( cinema_id INT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(100) NOT NULL, location VARCHAR(255) NOT NULL ); CREATE TABLE CB_THEATER ( theater_id INT AUTO_INCREMENT PRIMARY KEY, cinema_id INT NOT NULL, name VARCHAR(100) NOT NULL, seat_count INT NOT NULL, FOREIGN KEY (cinema_id) REFERENCES CB_CINEMA(cinema_id) ON DELETE CASCADE ); CREATE TABLE CB_FILMS ( film_id INT AUTO_INCREMENT PRIMARY KEY, title VARCHAR(150) NOT NULL, genre VARCHAR(50), duration_minutes INT, rating VARCHAR(10), description TEXT ); CREATE TABLE CB_SHOWINGS ( showing_id INT AUTO_INCREMENT PRIMARY KEY, theater_id INT NOT NULL, film_id INT NOT NULL, show_time DATETIME NOT NULL, FOREIGN KEY (theater_id) REFERENCES CB_THEATER(theater_id) ON DELETE CASCADE, FOREIGN KEY (film_id) REFERENCES CB_FILMS(film_id) ON DELETE CASCADE ); CREATE TABLE CB_SEATS ( seat_id INT AUTO_INCREMENT PRIMARY KEY, theater_id INT NOT NULL, seat_number VARCHAR(10) NOT NULL, row_label VARCHAR(5), FOREIGN KEY (theater_id) REFERENCES CB_THEATER(theater_id) ON DELETE CASCADE, UNIQUE (theater_id, seat_number) -- prevent duplicate seats in a theater ); CREATE TABLE CB_USERS ( user_id INT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(100) NOT NULL, email VARCHAR(150) NOT NULL UNIQUE, password_hash VARCHAR(255) NOT NULL, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ); CREATE TABLE CB_BOOKING ( booking_id INT AUTO_INCREMENT PRIMARY KEY, user_id INT NOT NULL, showing_id INT NOT NULL, seat_id INT NOT NULL, booking_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (user_id) REFERENCES CB_USERS(user_id) ON DELETE CASCADE, FOREIGN KEY (showing_id) REFERENCES CB_SHOWINGS(showing_id) ON DELETE CASCADE, FOREIGN KEY (seat_id) REFERENCES CB_SEATS(seat_id) ON DELETE CASCADE, UNIQUE (showing_id, seat_id) -- prevent double-booking of a seat for same showing );